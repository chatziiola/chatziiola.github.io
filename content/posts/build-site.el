;; build-site.el -- Summary

;;; WARNING: DO NOT EDIT THIS FILE. The elisp file should not be edited. Visit
;;; content/posts/20221228_elisp-org-publish-blog-configuration.org instead

;;; This is a configuration file for emacs to produce html code for my personal
;;; website from plain org mode files. To achieve this I utilize the included
;;; `ox-publish' package as well as `htmlize' (even though I can not understand
;;; why it does not behave as I would like it to ) and parts of
;;; `org-static-blog'

;;; WARNING: DO NOT EDIT THIS FILE. The elisp file should not be edited. Visit
;;; 20221228_elisp-org-publish-blog-configuration.org instead
;;; Yup, it is needed twice to make sure I'll read it.

;;; Commentary:
;;;; TODO Someday I will write something here. Till then ;) I changed quite some
;;;; stuff after having a look at:
;;;; https://her.esy.fun/posts/0001-new-blog/index.html

;;; Code:
;;;; Only to stop flycheck

(defvar domainname "https://chatziiola.github.io"
  "Self-Descriptive. It is the address for which we build our site")

(defvar base-dir "./content/"
  "The content directory.")

(defvar public-dir "./public/"
  "The root directory of our webserver.")

(defvar drafts-dir (concat base-dir "drafts/")
  "To be ignored when publishing.")

(defvar posts-dir (expand-file-name "posts/" base-dir)
  "Subfolder of content where posts lie.")

(defvar posts-public-dir (expand-file-name "posts/" public-dir)
  "The public subfolder in which posts will be published.")

(defvar src-dir "./content/src/"
  "Self-descriptive.")

(defvar src-public-dir "./public/src/"
  "Self-descriptive.")

(defvar css-path "/src/rougier.css"
  "Self-descriptive.")

(defvar org-blog-head
  (concat
   "<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">"
   "<link href=\"https://fonts.googleapis.com/css2?family=Fira+Sans&display=swap\"rel=\"stylesheet\">"
   "<link href=\"https://fonts.googleapis.com/css2?family=Roboto+Condensed&display=swap\"rel=\"stylesheet\">"
   "<link rel=\"stylesheet\" href=\"" css-path "\" />
    <link rel=\"icon\" type=\"image/x-icon\" href=\"/src/favicon.ico\">"
   "<meta charset=\"UTF-8\" name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">"
   )
  "Description - BLOG HTML HEAD.")

(defvar general-postamble
  "<p class=\"footer\"> Made with Emacs and Org.<br>CSS theme based on the one developed by <a href=\"https://github.com/rougier\">@rougier</a>.</p>"
  "To be used on all pages.")

(defvar comments-postamble
  (concat
   "<script src=\"https://giscus.app/client.js\" data-repo=\"chatziiola/chatziiola.github.io\" data-repo-id=\"R_kgDOGq8p0g\" data-category=\"Announcements\" data-category-id=\"DIC_kwDOGq8p0s4COSFW\" data-mapping=\"pathname\" data-reactions-enabled=\"1\" data-emit-metadata=\"0\" data-input-position=\"bottom\" data-theme=\"light\" data-lang=\"en\" data-loading=\"lazy\" crossorigin=\"anonymous\" async> </script>"
   "<p class=\"date footer\"> Originally created on %d </p>"
   general-postamble)
  "Postamble for posts so that giscus comments are enabled.")

;;;; These were set up on a need-to-set basis
(setq org-static-blog-enable-tags t)
(setq org-static-blog-index-file "recents.html")
(setq org-static-blog-index-front-matter org-blog-head)
(setq org-static-blog-index-length 50)
(setq org-static-blog-posts-directory "./content/posts/")
(setq org-static-blog-page-postamble general-postamble)
(setq org-static-blog-publish-directory "./public/posts/")
(setq org-static-blog-publish-title "Recent Articles")
(setq org-static-blog-publish-url "https://chatziiola.github.io")
(setq org-static-blog-index-front-matter "")

(setq make-backup-files nil
      auto-save-default nil
      create-lockfiles nil)

(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
			 ("elpa" . "https://elpa.gnu.org/packages/")))

(setq user-emacs-directory (expand-file-name "./.packages"))
(setq package-user-dir user-emacs-directory)

;;; Initialize the package system
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

;; Load the publishing system
(require 'ox-publish)
(require 'ox-html)
(require 'cl-extra)

;; Install dependencies
;; htmlize is needed for proper code formatting:
;; https://stackoverflow.com/questions/24082430/org-mode-no-syntax-highlighting-in-exported-html-page
(eval-when-compile
  (add-to-list 'load-path (expand-file-name "use-package" default-directory))
  (require 'use-package))

(use-package htmlize)

(setq org-src-fontify-natively t)
(setq org-html-htmlize-output-type 'css)
					;(setq org-html-htmlize-font-prefix "org-")

(setq org-src-fontify-natively t		; Fontify code in code blocks.
      org-adapt-indentation nil			; Adaptive indentation
      org-src-tab-acts-natively t		; Tab acts as in source editing
      org-confirm-babel-evaluate nil		; No confirmation before executing code
      org-edit-src-content-indentation 2	; No relative indentation for code blocks
      org-fontify-whole-block-delimiter-line t) ; Fontify whole block


;; Customize the HTML output
(setq org-html-validation-link nil
      org-html-head-include-scripts nil
      org-html-head-include-default-style nil
      org-html-indent nil
      org-html-self-link-headlines t
      org-export-with-tags t
      org-export-with-smart-quotes t
      org-html-head org-blog-head)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (gnuplot . t)
   (haskell . nil)
   (latex . t)
   (octave . t)
   (python . t)
   (matlab . t)
   (shell . t)
   (ruby . t)
   (sql . nil)
   (sqlite . t)))

(defun my-find-next-previous-series-article (file)
  "Find the filenames of the next and previous article, if they exist, in the same directory as FILE.
   This function acts only on lectures (files starting with 'lec_.) as of now.
The filenames are returned in HTML format."
  (when (string-prefix-p "lec_" (file-name-nondirectory file))
    (let* ((dir (file-name-directory file))
	   (name (file-name-nondirectory file))
	   (files (sort (directory-files dir nil "^lec_.*\\.org$") 'string<))
	   (index (cl-position name files :test 'equal)))

	;; This is a hack to ensure that the files get returned with the .html extension
	(let ((prev (if (and (> index 0) (nth (1- index) files))
			     (concat (file-name-sans-extension (nth (1- index) files)) ".html")))
	      (next 
		    (if (and (< index (1- (length files))) (nth (1+ index) files))
			(concat (file-name-sans-extension (nth (1+ index) files)) ".html"))))
	  (cons prev next))))
  )

(defun my-add-links-to-next-previous-series-article (backend)
  "Add links to the previous and next series articles, if they exist."
  (when (org-export-derived-backend-p backend 'html)
    (let ((prev-next (my-find-next-previous-series-article (buffer-file-name))))
      (when prev-next
	(let ((prev (car prev-next))
	      (next (cdr prev-next)))
	  (when (or prev next)
	    (goto-char (point-max))
	    (forward-line 1)
	    (insert "\n#+begin_export html\n")
	    (insert "<div class=\"series-navigation-div\">\n")
	    (when prev (insert (format "<p><a class=\"nav-button previous-nav-button\" href=\"%s\">Previous</a></p>\n" prev)))
	    (when next (insert (format "<p><a class=\"nav-button next-nav-button\" href=\"%s\">Next</a></p>\n" next)))
	    (insert "</div>\n")
	    (insert "#+end_export")))))))

(add-hook 'org-export-before-parsing-hook 'my-add-links-to-next-previous-series-article)

(setq org-publish-project-alist
      (list

(list "org-files"

:base-directory base-dir
:base-extension "org"
:exclude drafts-dir

:recursive t

:html-link-home "/index.html"
:html-link-up "../index.html"
:html-postamble general-postamble
:publishing-directory public-dir
:publishing-function 'org-html-publish-to-html

:with-author nil           ;; Don't include author name
:with-creator nil            ;; Include Emacs and Org versions in footer
:with-drawers t
:headline-level 4

:with-toc nil

:section-numbers nil       ;; Don't include section numbers

:html-link-home "/index.html"
:html-link-up "../index.html"

:time-stamp-file nil)

(list "blog-posts"

:base-directory posts-dir
:base-extension "org"
:exclude ".*index.org"

:recursive t

:html-link-up "./index.html"
:html-link-home "/index.html"

;     :auto-sitemap t
;     :sitemap-filename "sitemap.org"
;     :sitemap-title "Sitemap"
;     :sitemap-sort-files 'anti-chronologically
;     :sitemap-date-format "Published: %a %b %d %Y"

:html-postamble  comments-postamble
:publishing-directory posts-public-dir
:publishing-function 'org-html-publish-to-html

:with-author t           ;; Don't include author name
:with-creator t            ;; Include Emacs and Org versions in footer
:with-drawers t
:with-date t
:headline-level 4
:with-toc t                ;; Include a table of contents
:section-numbers nil       ;; Don't include section numbers
:time-stamp-file nil)

(list "Images"
      :base-directory posts-dir
      :base-extension "png"
      :publishing-directory posts-public-dir
      :publishing-function 'org-blog-publish-attachment
      :recursive t
      )

(list "Website static stuff"
      :base-directory src-dir
      :base-extension "html\\|css\\|ico"
      :publishing-directory src-public-dir
      :publishing-function 'org-publish-attachment
      :recursive t
      )
)
)

;; Automatic image conversion
(defun org-blog-publish-attachment (plist filename pub-dir)
  "Publish a file with no transformation of any kind.
FILENAME is the filename of the Org file to be published.  PLIST
is the property list for the given project.  PUB-DIR is the
publishing directory.
Take care of minimizing the pictures using imagemagick.
Return output file name."
  (unless (file-directory-p pub-dir)
    (make-directory pub-dir t))
  (or (equal (expand-file-name (file-name-directory filename))
	     (file-name-as-directory (expand-file-name pub-dir)))
      (let ((dst-file (expand-file-name (file-name-nondirectory filename) pub-dir)))
	(if (string-match-p ".*\\.\\(png\\|jpg\\|gif\\)$" filename)
	    (shell-command (format "convert %s -resize 800x800\\> +dither -colors 16 -depth 4 %s" filename dst-file))
	  (copy-file filename dst-file t)))))

; Generate the site output
(org-publish-all t)

(load (expand-file-name "index-generator.el" default-directory))
(chatziiola/org-static-blog-assemble-index-no-content)

;;; build-site.el ends here.
